"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeNpmScriptsWithTargets = exports.mergePackageJsonConfigurationWithProjectJson = exports.buildProjectFromProjectJson = exports.getNxProjectJsonPlugin = void 0;
const node_path_1 = require("node:path");
const node_fs_1 = require("node:fs");
const workspaces_1 = require("../src/config/workspaces");
const fileutils_1 = require("../src/utils/fileutils");
const package_json_1 = require("../src/utils/package-json");
function getNxProjectJsonPlugin(root) {
    return {
        name: 'nx-core-build-project-json-nodes',
        createNodes: [
            '{project.json,**/project.json}',
            (file) => {
                const json = (0, fileutils_1.readJsonFile)((0, node_path_1.join)(root, file));
                const project = buildProjectFromProjectJson(json, file);
                mergePackageJsonConfigurationWithProjectJson(project, root);
                return {
                    projects: {
                        [project.name]: project,
                    },
                };
            },
        ],
    };
}
exports.getNxProjectJsonPlugin = getNxProjectJsonPlugin;
function buildProjectFromProjectJson(json, path) {
    return Object.assign({ name: (0, workspaces_1.toProjectName)(path), root: (0, node_path_1.dirname)(path) }, json);
}
exports.buildProjectFromProjectJson = buildProjectFromProjectJson;
function mergePackageJsonConfigurationWithProjectJson(p, root) {
    if ((0, node_fs_1.existsSync)((0, node_path_1.join)(root, p.root, 'package.json'))) {
        try {
            const packageJson = (0, fileutils_1.readJsonFile)((0, node_path_1.join)(root, p.root, 'package.json'));
            p.targets = mergeNpmScriptsWithTargets(packageJson, p.targets);
            const { nx } = packageJson;
            if (nx === null || nx === void 0 ? void 0 : nx.tags) {
                p.tags = [...(p.tags || []), ...nx.tags];
            }
            if (nx === null || nx === void 0 ? void 0 : nx.implicitDependencies) {
                p.implicitDependencies = [
                    ...(p.implicitDependencies || []),
                    ...nx.implicitDependencies,
                ];
            }
            if (nx === null || nx === void 0 ? void 0 : nx.namedInputs) {
                p.namedInputs = Object.assign(Object.assign({}, (p.namedInputs || {})), nx.namedInputs);
            }
        }
        catch (e) {
            // ignore json parser errors
        }
    }
}
exports.mergePackageJsonConfigurationWithProjectJson = mergePackageJsonConfigurationWithProjectJson;
function mergeNpmScriptsWithTargets(packageJson, targets) {
    try {
        return Object.assign(Object.assign({}, (0, package_json_1.readTargetsFromPackageJson)(packageJson)), (targets || {}));
    }
    catch (e) {
        return targets;
    }
}
exports.mergeNpmScriptsWithTargets = mergeNpmScriptsWithTargets;
