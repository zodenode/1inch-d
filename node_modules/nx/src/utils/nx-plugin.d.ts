import { ProjectFileMap, ProjectGraph, ProjectGraphExternalNode } from '../config/project-graph';
import { PackageJson } from './package-json';
import { ProjectConfiguration, ProjectsConfigurations } from '../config/workspace-json-project-json';
import { NxJsonConfiguration } from '../config/nx-json';
import { NxPluginV1 } from './nx-plugin.deprecated';
import { ProjectGraphDependencyWithFile } from '../project-graph/project-graph-builder';
/**
 * Context for {@link CreateNodesFunction}
 */
export interface CreateNodesContext {
    readonly nxJsonConfiguration: NxJsonConfiguration;
    readonly workspaceRoot: string;
}
/**
 * A function which parses a configuration file into a set of nodes.
 * Used for creating nodes for the {@link ProjectGraph}
 */
export type CreateNodesFunction = (projectConfigurationFile: string, context: CreateNodesContext) => {
    projects?: Record<string, ProjectConfiguration>;
    externalNodes?: Record<string, ProjectGraphExternalNode>;
};
/**
 * A pair of file patterns and {@link CreateNodesFunction}
 */
export type CreateNodes = [
    projectFilePattern: string,
    createNodesFunction: CreateNodesFunction
];
/**
 * Context for {@link CreateDependencies}
 */
export interface CreateDependenciesContext {
    /**
     * The current project graph,
     */
    readonly graph: ProjectGraph;
    /**
     * The configuration of each project in the workspace
     */
    readonly projectsConfigurations: ProjectsConfigurations;
    /**
     * The `nx.json` configuration from the workspace
     */
    readonly nxJsonConfiguration: NxJsonConfiguration;
    /**
     * All files in the workspace
     */
    readonly fileMap: ProjectFileMap;
    /**
     * Files changes since last invocation
     */
    readonly filesToProcess: ProjectFileMap;
}
/**
 * A function which parses files in the workspace to create dependencies in the {@link ProjectGraph}
 * Use {@link validateDependency} to validate dependencies
 */
export type CreateDependencies = (context: CreateDependenciesContext) => ProjectGraphDependencyWithFile[] | Promise<ProjectGraphDependencyWithFile[]>;
/**
 * A plugin for Nx which creates nodes and dependencies for the {@link ProjectGraph}
 */
export type NxPluginV2 = {
    name: string;
    /**
     * Provides a file pattern and function that retrieves configuration info from
     * those files. e.g. { '**\/*.csproj': buildProjectsFromCsProjFile }
     */
    createNodes?: CreateNodes;
    /**
     * Provides a function to analyze files to create dependencies for the {@link ProjectGraph}
     */
    createDependencies?: CreateDependencies;
};
export * from './nx-plugin.deprecated';
/**
 * A plugin for Nx
 */
export type NxPlugin = NxPluginV1 | NxPluginV2;
export declare function loadNxPluginAsync(moduleName: string, paths: string[], root: string): Promise<NxPlugin>;
/**
 * @deprecated Use loadNxPlugins instead.
 */
export declare function loadNxPluginsSync(plugins: string[], paths?: string[], root?: string): (NxPluginV2 & Pick<NxPluginV1, 'processProjectGraph'>)[];
export declare function loadNxPlugins(plugins: string[], paths?: string[], root?: string): Promise<(NxPluginV2 & Pick<NxPluginV1, 'processProjectGraph'>)[]>;
export declare function isNxPluginV2(plugin: NxPlugin): plugin is NxPluginV2;
export declare function isNxPluginV1(plugin: NxPlugin): plugin is NxPluginV1;
export declare function readPluginPackageJson(pluginName: string, paths?: string[]): {
    path: string;
    json: PackageJson;
};
export declare function resolveLocalNxPlugin(importPath: string, root?: string): {
    path: string;
    projectConfig: ProjectConfiguration;
} | null;
/**
 * Register swc-node or ts-node if they are not currently registered
 * with some default settings which work well for Nx plugins.
 */
export declare function registerPluginTSTranspiler(): void;
