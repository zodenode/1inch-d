"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGlobs = exports.retrieveProjectConfigurationsWithoutPluginInference = exports.retrieveProjectConfigurationPathsWithoutPluginInference = exports.retrieveProjectConfigurationPaths = exports.retrieveProjectConfigurationsSync = exports.retrieveProjectConfigurationsWithAngularProjects = exports.retrieveProjectConfigurations = exports.retrieveWorkspaceFiles = void 0;
const tslib_1 = require("tslib");
const perf_hooks_1 = require("perf_hooks");
const installation_directory_1 = require("../../utils/installation-directory");
const angular_json_1 = require("../../adapter/angular-json");
const nx_json_1 = require("../../config/nx-json");
const native_1 = require("../../native");
const package_json_workspaces_1 = require("../../../plugins/package-json-workspaces");
const project_configuration_utils_1 = require("./project-configuration-utils");
const nx_plugin_1 = require("../../utils/nx-plugin");
/**
 * Walks the workspace directory to create the `projectFileMap`, `ProjectConfigurations` and `allWorkspaceFiles`
 * @throws
 * @param workspaceRoot
 * @param nxJson
 */
function retrieveWorkspaceFiles(workspaceRoot, nxJson) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { getWorkspaceFilesNative } = require('../../native');
        perf_hooks_1.performance.mark('native-file-deps:start');
        const plugins = yield (0, nx_plugin_1.loadNxPlugins)((_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.plugins) !== null && _a !== void 0 ? _a : [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
        let globs = configurationGlobs(workspaceRoot, plugins);
        perf_hooks_1.performance.mark('native-file-deps:end');
        perf_hooks_1.performance.measure('native-file-deps', 'native-file-deps:start', 'native-file-deps:end');
        perf_hooks_1.performance.mark('get-workspace-files:start');
        const { projectConfigurations, projectFileMap, globalFiles, externalNodes } = getWorkspaceFilesNative(workspaceRoot, globs, (configs) => {
            const projectConfigurations = createProjectConfigurations(workspaceRoot, nxJson, configs, plugins);
            return {
                projectNodes: projectConfigurations.projects,
                externalNodes: projectConfigurations.externalNodes,
            };
        });
        perf_hooks_1.performance.mark('get-workspace-files:end');
        perf_hooks_1.performance.measure('get-workspace-files', 'get-workspace-files:start', 'get-workspace-files:end');
        return {
            allWorkspaceFiles: buildAllWorkspaceFiles(projectFileMap, globalFiles),
            projectFileMap,
            projectConfigurations: {
                version: 2,
                projects: projectConfigurations,
            },
            externalNodes: externalNodes,
        };
    });
}
exports.retrieveWorkspaceFiles = retrieveWorkspaceFiles;
/**
 * Walk through the workspace and return `ProjectConfigurations`. Only use this if the projectFileMap is not needed.
 *
 * @param workspaceRoot
 * @param nxJson
 */
function retrieveProjectConfigurations(workspaceRoot, nxJson) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const plugins = yield (0, nx_plugin_1.loadNxPlugins)((_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.plugins) !== null && _a !== void 0 ? _a : [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
        const globs = configurationGlobs(workspaceRoot, plugins);
        return _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs);
    });
}
exports.retrieveProjectConfigurations = retrieveProjectConfigurations;
function retrieveProjectConfigurationsWithAngularProjects(workspaceRoot, nxJson) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const plugins = yield (0, nx_plugin_1.loadNxPlugins)((_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.plugins) !== null && _a !== void 0 ? _a : [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
        if ((0, angular_json_1.shouldMergeAngularProjects)(workspaceRoot, true) &&
            !plugins.some((p) => p.name === angular_json_1.NX_ANGULAR_JSON_PLUGIN_NAME)) {
            plugins.push(angular_json_1.NxAngularJsonPlugin);
        }
        const globs = configurationGlobs(workspaceRoot, plugins);
        return _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs);
    });
}
exports.retrieveProjectConfigurationsWithAngularProjects = retrieveProjectConfigurationsWithAngularProjects;
/**
 * @deprecated Use {@link retrieveProjectConfigurations} instead.
 */
function retrieveProjectConfigurationsSync(workspaceRoot, nxJson) {
    var _a;
    const plugins = (0, nx_plugin_1.loadNxPluginsSync)((_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.plugins) !== null && _a !== void 0 ? _a : [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
    const globs = configurationGlobs(workspaceRoot, plugins);
    return _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs);
}
exports.retrieveProjectConfigurationsSync = retrieveProjectConfigurationsSync;
function _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs) {
    const { getProjectConfigurations } = require('../../native');
    return getProjectConfigurations(workspaceRoot, globs, (configs) => {
        const projectConfigurations = createProjectConfigurations(workspaceRoot, nxJson, configs, plugins);
        return {
            projectNodes: projectConfigurations.projects,
            externalNodes: projectConfigurations.externalNodes,
        };
    });
}
function retrieveProjectConfigurationPaths(root, nxJson) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectGlobPatterns = configurationGlobs(root, yield (0, nx_plugin_1.loadNxPlugins)((_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.plugins) !== null && _a !== void 0 ? _a : [], (0, installation_directory_1.getNxRequirePaths)(root), root));
        const { getProjectConfigurationFiles } = require('../../native');
        return getProjectConfigurationFiles(root, projectGlobPatterns);
    });
}
exports.retrieveProjectConfigurationPaths = retrieveProjectConfigurationPaths;
function retrieveProjectConfigurationPathsWithoutPluginInference(root) {
    return (0, native_1.getProjectConfigurationFiles)(root, configurationGlobsWithoutPlugins(root));
}
exports.retrieveProjectConfigurationPathsWithoutPluginInference = retrieveProjectConfigurationPathsWithoutPluginInference;
const projectsWithoutPluginCache = new Map();
// TODO: This function is called way too often, it should be optimized without this cache
function retrieveProjectConfigurationsWithoutPluginInference(root) {
    const nxJson = (0, nx_json_1.readNxJson)(root);
    const projectGlobPatterns = configurationGlobsWithoutPlugins(root);
    const cacheKey = root + ',' + projectGlobPatterns.join(',');
    if (projectsWithoutPluginCache.has(cacheKey)) {
        return projectsWithoutPluginCache.get(cacheKey);
    }
    const { getProjectConfigurations } = require('../../native');
    const projectConfigurations = getProjectConfigurations(root, projectGlobPatterns, (configs) => {
        const { projects } = createProjectConfigurations(root, nxJson, configs, []);
        return {
            projectNodes: projects,
            externalNodes: {},
        };
    }).projectNodes;
    projectsWithoutPluginCache.set(cacheKey, projectConfigurations);
    return projectConfigurations;
}
exports.retrieveProjectConfigurationsWithoutPluginInference = retrieveProjectConfigurationsWithoutPluginInference;
function buildAllWorkspaceFiles(projectFileMap, globalFiles) {
    perf_hooks_1.performance.mark('get-all-workspace-files:start');
    let fileData = Object.values(projectFileMap).flat();
    fileData = fileData.concat(globalFiles);
    perf_hooks_1.performance.mark('get-all-workspace-files:end');
    perf_hooks_1.performance.measure('get-all-workspace-files', 'get-all-workspace-files:start', 'get-all-workspace-files:end');
    return fileData;
}
function createProjectConfigurations(workspaceRoot, nxJson, configFiles, plugins) {
    perf_hooks_1.performance.mark('build-project-configs:start');
    const { projects, externalNodes } = (0, project_configuration_utils_1.buildProjectsConfigurationsFromProjectPathsAndPlugins)(nxJson, configFiles, plugins, workspaceRoot);
    let projectConfigurations = projects;
    perf_hooks_1.performance.mark('build-project-configs:end');
    perf_hooks_1.performance.measure('build-project-configs', 'build-project-configs:start', 'build-project-configs:end');
    return {
        projects: projectConfigurations,
        externalNodes,
    };
}
function configurationGlobs(workspaceRoot, plugins) {
    const globPatterns = configurationGlobsWithoutPlugins(workspaceRoot);
    for (const plugin of plugins) {
        if (plugin.createNodes) {
            globPatterns.push(plugin.createNodes[0]);
        }
    }
    return globPatterns;
}
exports.configurationGlobs = configurationGlobs;
function configurationGlobsWithoutPlugins(workspaceRoot) {
    return [
        'project.json',
        '**/project.json',
        ...(0, package_json_workspaces_1.getGlobPatternsFromPackageManagerWorkspaces)(workspaceRoot),
    ];
}
