"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.monorepoSchematic = exports.monorepoGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const move_1 = require("../move/move");
function monorepoGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(tree);
        const nxJson = (0, devkit_1.readNxJson)(tree);
        (0, devkit_1.updateNxJson)(tree, nxJson);
        let rootProject;
        const projectsToMove = [];
        // Need to determine libs vs packages directory base on the type of root project.
        for (const [, project] of projects) {
            if (project.root === '.')
                rootProject = project;
            projectsToMove.push(project);
        }
        // Currently, Nx only handles apps+libs or packages. You cannot mix and match them.
        // If the standalone project is an app (React, Angular, etc), then use apps+libs.
        // Otherwise, for TS standalone (lib), use packages.
        const isRootProjectApp = rootProject.projectType === 'application';
        const appsDir = isRootProjectApp ? 'apps' : 'packages';
        const libsDir = isRootProjectApp ? 'libs' : 'packages';
        for (const project of projectsToMove) {
            yield (0, move_1.moveGenerator)(tree, {
                projectName: project.name,
                newProjectName: project.name,
                destination: project.projectType === 'application'
                    ? (0, devkit_1.joinPathFragments)(appsDir, project.name)
                    : (0, devkit_1.joinPathFragments)(libsDir, project.name),
                destinationRelativeToRoot: true,
                updateImportPath: project.projectType === 'library',
            });
        }
    });
}
exports.monorepoGenerator = monorepoGenerator;
exports.default = monorepoGenerator;
exports.monorepoSchematic = (0, devkit_1.convertNxGenerator)(monorepoGenerator);
