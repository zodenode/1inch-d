"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webInitSchematic = exports.webInitGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const versions_1 = require("../../utils/versions");
function updateDependencies(tree, schema) {
    (0, devkit_1.removeDependenciesFromPackageJson)(tree, ['@nx/web'], []);
    const devDependencies = {
        '@nx/web': versions_1.nxVersion,
        '@types/node': versions_1.typesNodeVersion,
    };
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {
        tslib: versions_1.tsLibVersion,
    }, devDependencies);
}
function webInitGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const jsInitTask = yield (0, js_1.initGenerator)(tree, {
            js: false,
            skipFormat: true,
        });
        tasks.push(jsInitTask);
        if (!schema.unitTestRunner || schema.unitTestRunner === 'jest') {
            const { jestInitGenerator } = (0, devkit_1.ensurePackage)('@nx/jest', versions_1.nxVersion);
            const jestTask = yield jestInitGenerator(tree, {
                skipPackageJson: schema.skipPackageJson,
            });
            tasks.push(jestTask);
        }
        if (!schema.e2eTestRunner || schema.e2eTestRunner === 'cypress') {
            const { cypressInitGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
            const cypressTask = yield cypressInitGenerator(tree, {
                skipPackageJson: schema.skipPackageJson,
            });
            tasks.push(cypressTask);
        }
        else if (schema.e2eTestRunner === 'playwright') {
            const { initGenerator: playwrightInitGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
            const playwrightConfigTask = yield playwrightInitGenerator(tree, {
                skipFormat: true,
                skipPackageJson: schema.skipPackageJson,
            });
            tasks.push(playwrightConfigTask);
        }
        if (!schema.skipPackageJson) {
            const installTask = updateDependencies(tree, schema);
            tasks.push(installTask);
        }
        if (!schema.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.webInitGenerator = webInitGenerator;
exports.default = webInitGenerator;
exports.webInitSchematic = (0, devkit_1.convertNxGenerator)(webInitGenerator);
