"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBuildSchematic = exports.setupBuildGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const add_swc_config_1 = require("../../utils/swc/add-swc-config");
const add_swc_dependencies_1 = require("../../utils/swc/add-swc-dependencies");
const versions_1 = require("../../utils/versions");
function setupBuildGenerator(tree, options) {
    var _a, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const buildTarget = (_a = options.buildTarget) !== null && _a !== void 0 ? _a : 'build';
        (_b = project.targets) !== null && _b !== void 0 ? _b : (project.targets = {});
        let mainFile;
        if (options.main) {
            mainFile = options.main;
        }
        else {
            const root = (_c = project.sourceRoot) !== null && _c !== void 0 ? _c : project.root;
            for (const f of [
                (0, devkit_1.joinPathFragments)(root, 'main.ts'),
                (0, devkit_1.joinPathFragments)(root, 'main.js'),
                (0, devkit_1.joinPathFragments)(root, 'index.ts'),
                (0, devkit_1.joinPathFragments)(root, 'index.js'),
            ]) {
                if (tree.exists(f)) {
                    mainFile = f;
                    break;
                }
            }
        }
        if (!mainFile || !tree.exists(mainFile)) {
            throw new Error(`Cannot locate a main file for ${options.project}. Please specify one using --main=<file-path>.`);
        }
        let tsConfigFile;
        if (options.tsConfig) {
            tsConfigFile = options.tsConfig;
        }
        else {
            for (const f of [
                'tsconfig.lib.json',
                'tsconfig.app.json',
                'tsconfig.json',
            ]) {
                const candidate = (0, devkit_1.joinPathFragments)(project.root, f);
                if (tree.exists(candidate)) {
                    tsConfigFile = candidate;
                    break;
                }
            }
        }
        if (!tsConfigFile || !tree.exists(tsConfigFile)) {
            throw new Error(`Cannot locate a tsConfig file for ${options.project}. Please specify one using --tsConfig=<file-path>.`);
        }
        switch (options.bundler) {
            case 'vite': {
                const { viteConfigurationGenerator } = (0, devkit_1.ensurePackage)('@nx/vite', versions_1.nxVersion);
                const task = yield viteConfigurationGenerator(tree, {
                    buildTarget: options.buildTarget,
                    project: options.project,
                    newProject: true,
                    uiFramework: 'none',
                    includeVitest: false,
                    includeLib: true,
                    skipFormat: true,
                });
                tasks.push(task);
                break;
            }
            case 'esbuild': {
                const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/esbuild', versions_1.nxVersion);
                const task = yield configurationGenerator(tree, {
                    main: mainFile,
                    buildTarget: options.buildTarget,
                    project: options.project,
                    skipFormat: true,
                });
                tasks.push(task);
                break;
            }
            case 'rollup': {
                const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/rollup', versions_1.nxVersion);
                const task = yield configurationGenerator(tree, {
                    buildTarget: options.buildTarget,
                    main: mainFile,
                    project: options.project,
                    skipFormat: true,
                    compiler: 'tsc',
                });
                tasks.push(task);
                break;
            }
            case 'tsc': {
                const outputPath = (0, devkit_1.joinPathFragments)('dist', project.root);
                project.targets[buildTarget] = {
                    executor: `@nx/js:tsc`,
                    outputs: ['{options.outputPath}'],
                    options: {
                        outputPath,
                        main: mainFile,
                        tsConfig: tsConfigFile,
                        assets: [],
                    },
                };
                (0, devkit_1.updateProjectConfiguration)(tree, options.project, project);
                break;
            }
            case 'swc': {
                const outputPath = (0, devkit_1.joinPathFragments)('dist', project.root);
                project.targets[buildTarget] = {
                    executor: `@nx/js:swc`,
                    outputs: ['{options.outputPath}'],
                    options: {
                        outputPath,
                        main: mainFile,
                        tsConfig: tsConfigFile,
                        assets: [],
                    },
                };
                (0, devkit_1.updateProjectConfiguration)(tree, options.project, project);
                (0, add_swc_dependencies_1.addSwcDependencies)(tree);
                (0, add_swc_config_1.addSwcConfig)(tree, project.root, 'es6');
            }
        }
        yield (0, devkit_1.formatFiles)(tree);
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.setupBuildGenerator = setupBuildGenerator;
exports.default = setupBuildGenerator;
exports.setupBuildSchematic = (0, devkit_1.convertNxGenerator)(setupBuildGenerator);
