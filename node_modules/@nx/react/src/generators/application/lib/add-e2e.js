"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addE2e = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const web_1 = require("@nx/web");
const versions_1 = require("../../../utils/versions");
function addE2e(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (options.e2eTestRunner) {
            case 'cypress':
                (0, web_1.webStaticServeGenerator)(tree, {
                    buildTarget: `${options.projectName}:build`,
                    targetName: 'serve-static',
                });
                const { cypressProjectGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
                return yield cypressProjectGenerator(tree, Object.assign(Object.assign({}, options), { name: options.e2eProjectName, directory: options.directory, project: options.projectName, bundler: options.bundler === 'rspack' ? 'webpack' : options.bundler, skipFormat: true }));
            case 'playwright':
                const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
                (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
                    root: options.e2eProjectRoot,
                    sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
                    targets: {},
                    implicitDependencies: [options.projectName],
                });
                return configurationGenerator(tree, {
                    project: options.e2eProjectName,
                    skipFormat: true,
                    skipPackageJson: options.skipPackageJson,
                    directory: 'src',
                    js: false,
                    linter: options.linter,
                    setParserOptionsProject: options.setParserOptionsProject,
                    webServerCommand: `${(0, devkit_1.getPackageManagerCommand)().exec} nx serve ${options.name}`,
                    webServerAddress: 'http://localhost:4200',
                });
            case 'none':
            default:
                return () => { };
        }
    });
}
exports.addE2e = addE2e;
