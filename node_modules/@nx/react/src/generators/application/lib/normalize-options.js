"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = exports.normalizeProjectName = exports.normalizeDirectory = void 0;
const assertion_1 = require("../../../utils/assertion");
const devkit_1 = require("@nx/devkit");
const find_free_port_1 = require("./find-free-port");
function normalizeDirectory(options) {
    var _a;
    options.directory = (_a = options.directory) === null || _a === void 0 ? void 0 : _a.replace(/\\{1,2}/g, '/');
    const { projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    return projectDirectory
        ? `${(0, devkit_1.names)(projectDirectory).fileName}/${(0, devkit_1.names)(options.name).fileName}`
        : (0, devkit_1.names)(options.name).fileName;
}
exports.normalizeDirectory = normalizeDirectory;
function normalizeProjectName(options) {
    return normalizeDirectory(options).replace(new RegExp('/', 'g'), '-');
}
exports.normalizeProjectName = normalizeProjectName;
function normalizeOptions(host, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const appDirectory = normalizeDirectory(options);
    const appProjectName = normalizeProjectName(options);
    const e2eProjectName = options.rootProject
        ? 'e2e'
        : `${(0, devkit_1.names)(options.name).fileName}-e2e`;
    const { layoutDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const appsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : (0, devkit_1.getWorkspaceLayout)(host).appsDir;
    const appProjectRoot = options.rootProject
        ? '.'
        : (0, devkit_1.normalizePath)(`${appsDir}/${appDirectory}`);
    const e2eProjectRoot = options.rootProject
        ? 'e2e'
        : (0, devkit_1.joinPathFragments)(appsDir, `${appDirectory}-e2e`);
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const fileName = options.pascalCaseFiles ? 'App' : 'app';
    const styledModule = /^(css|scss|less|styl|none)$/.test(options.style)
        ? null
        : options.style;
    (0, assertion_1.assertValidStyle)(options.style);
    if (options.bundler === 'vite') {
        options.unitTestRunner = 'vitest';
    }
    const normalized = Object.assign(Object.assign({}, options), { name: (0, devkit_1.names)(options.name).fileName, projectName: appProjectName, appProjectRoot,
        e2eProjectName,
        e2eProjectRoot,
        parsedTags,
        fileName,
        styledModule, hasStyles: options.style !== 'none' });
    normalized.routing = (_a = normalized.routing) !== null && _a !== void 0 ? _a : false;
    normalized.strict = (_b = normalized.strict) !== null && _b !== void 0 ? _b : true;
    normalized.classComponent = (_c = normalized.classComponent) !== null && _c !== void 0 ? _c : false;
    normalized.compiler = (_d = normalized.compiler) !== null && _d !== void 0 ? _d : 'babel';
    normalized.bundler = (_e = normalized.bundler) !== null && _e !== void 0 ? _e : 'webpack';
    normalized.unitTestRunner =
        (_f = normalized.unitTestRunner) !== null && _f !== void 0 ? _f : (normalized.bundler === 'vite' ? 'vitest' : 'jest');
    normalized.e2eTestRunner = (_g = normalized.e2eTestRunner) !== null && _g !== void 0 ? _g : 'cypress';
    normalized.inSourceTests = normalized.minimal || normalized.inSourceTests;
    (_h = normalized.devServerPort) !== null && _h !== void 0 ? _h : (normalized.devServerPort = (0, find_free_port_1.findFreePort)(host));
    normalized.minimal = (_j = normalized.minimal) !== null && _j !== void 0 ? _j : false;
    return normalized;
}
exports.normalizeOptions = normalizeOptions;
