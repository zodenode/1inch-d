"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const ssr_dev_server_impl_1 = require("@nx/webpack/src/executors/ssr-dev-server/ssr-dev-server.impl");
const path_1 = require("path");
const chalk = require("chalk");
const async_iterable_1 = require("@nx/devkit/src/utils/async-iterable");
const child_process_1 = require("child_process");
function moduleFederationSsrDevServer(options, context) {
    var _a, _b;
    return tslib_1.__asyncGenerator(this, arguments, function* moduleFederationSsrDevServer_1() {
        let iter = (0, ssr_dev_server_impl_1.default)(options, context);
        const p = context.projectsConfigurations.projects[context.projectName];
        const moduleFederationConfigPath = (0, path_1.join)(context.root, p.root, 'module-federation.config.js');
        let moduleFederationConfig;
        try {
            moduleFederationConfig = require(moduleFederationConfigPath);
        }
        catch (_c) {
            // TODO(jack): Add a link to guide
            throw new Error(`Could not load ${moduleFederationConfigPath}. Was this project generated with "@nx/react:host"?`);
        }
        const remotesToSkip = new Set((_a = options.skipRemotes) !== null && _a !== void 0 ? _a : []);
        const remotesNotInWorkspace = [];
        const knownRemotes = ((_b = moduleFederationConfig.remotes) !== null && _b !== void 0 ? _b : []).filter((r) => {
            const validRemote = Array.isArray(r) ? r[0] : r;
            if (remotesToSkip.has(validRemote)) {
                return false;
            }
            else if (!context.projectGraph.nodes[validRemote]) {
                remotesNotInWorkspace.push(validRemote);
                return false;
            }
            else {
                return true;
            }
        });
        if (remotesNotInWorkspace.length > 0) {
            devkit_1.logger.warn(`Skipping serving ${remotesNotInWorkspace.join(', ')} as they could not be found in the workspace. Ensure they are served correctly.`);
        }
        const devServeApps = !options.devRemotes
            ? []
            : Array.isArray(options.devRemotes)
                ? options.devRemotes
                : [options.devRemotes];
        for (const app of knownRemotes) {
            const [appName] = Array.isArray(app) ? app : [app];
            const isDev = devServeApps.includes(appName);
            const remoteServeIter = isDev
                ? yield tslib_1.__await((0, devkit_1.runExecutor)({
                    project: appName,
                    target: 'serve',
                    configuration: context.configurationName,
                }, {
                    watch: isDev,
                }, context))
                : (0, async_iterable_1.mapAsyncIterable)((0, async_iterable_1.createAsyncIterable)(({ next, done }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    const remoteProject = context.projectsConfigurations.projects[appName];
                    const remoteServerOutput = (0, path_1.join)(devkit_1.workspaceRoot, remoteProject.targets.server.options.outputPath, 'main.js');
                    const pm = (0, devkit_1.getPackageManagerCommand)();
                    (0, child_process_1.execSync)(`${pm.exec} nx run ${appName}:server${context.configurationName ? `:${context.configurationName}` : ''}`, { stdio: 'inherit' });
                    const child = (0, child_process_1.fork)(remoteServerOutput, {
                        env: {
                            PORT: remoteProject.targets['serve-browser'].options.port,
                        },
                    });
                    child.on('message', (msg) => {
                        if (msg === 'nx.server.ready') {
                            next(true);
                            done();
                        }
                    });
                })), (x) => x);
            iter = (0, async_iterable_1.combineAsyncIterables)(iter, remoteServeIter);
        }
        let numAwaiting = knownRemotes.length + 1; // remotes + host
        return yield tslib_1.__await(yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues((0, async_iterable_1.tapAsyncIterable)(iter, (x) => {
            var _a, _b;
            numAwaiting--;
            if (numAwaiting === 0) {
                devkit_1.logger.info(`[ ${chalk.green('ready')} ] http://${(_a = options.host) !== null && _a !== void 0 ? _a : 'localhost'}:${(_b = options.port) !== null && _b !== void 0 ? _b : 4200}`);
            }
        })))));
    });
}
exports.default = moduleFederationSsrDevServer;
