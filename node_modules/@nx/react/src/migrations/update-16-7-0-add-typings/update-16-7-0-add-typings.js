"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
function addTypings(tree) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(tree);
        const buildExecutors = [
            '@nx/webpack:webpack',
            '@nx/vite:build',
            '@nx/rspack:rspack',
        ];
        const relatedTsConfigs = [
            'tsconfig.app.json',
            'tsconfig.lib.json',
            'tsconfig.spec.json',
        ];
        const typesToAdd = [
            '@nx/react/typings/cssmodule.d.ts',
            '@nx/react/typings/image.d.ts',
        ];
        for (const [, config] of projects) {
            if (buildExecutors.includes((_b = (_a = config === null || config === void 0 ? void 0 : config.targets) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.executor)) {
                const rootPath = config.root;
                relatedTsConfigs.forEach((tsConfig) => {
                    const tsConfigPath = (0, devkit_1.joinPathFragments)(rootPath, tsConfig);
                    if (tree.exists(tsConfigPath)) {
                        (0, devkit_1.updateJson)(tree, tsConfigPath, (json) => {
                            var _a;
                            const compilerOptions = json.compilerOptions || {};
                            compilerOptions.types = [
                                ...new Set([...(compilerOptions.types || []), ...typesToAdd]),
                            ];
                            if (((_a = json.files) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                                json.files = json.files.filter((file) => !['cssmodule.d.ts', 'image.d.ts'].includes(file));
                            }
                            return Object.assign(Object.assign({}, json), { compilerOptions });
                        });
                    }
                });
            }
        }
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = addTypings;
